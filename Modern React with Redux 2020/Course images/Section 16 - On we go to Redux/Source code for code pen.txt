//references 
// https://codepen.io/iamscottcox/pen/xROoyR?editors=1010
// https://redux.js.org/docs/basics/ExampleTodoList.html
// https://codepen.io/jnmorse/pen/qbLegO
// https://codepen.io/tag/react-redux/

//import {combineReducers} from 'redux'
console.clear();

//*********************************************************************************************************************************************************
// Create some actions
//*********************************************************************************************************************************************************
const createPolicy = (name, amount) => {
  return { // Action (a form in our analogy)
    type: 'CREATE_POLICY',
    payload: {
      name: name,
      amount: amount
    }
  };
};

const deletePolicy = (name) => {
  return {
    type: 'DELETE_POLICY',
    payload: {
      name: name
    }
  };
};

const createClaim = (name, amountOfMoneyToCollect) => {
  return {
    type: 'CREATE_CLAIM',
    payload: {
      name: name,
      amountOfMoneyToCollect: amountOfMoneyToCollect
    }
  };
};

//*********************************************************************************************************************************************************
// Create some reducers
//*********************************************************************************************************************************************************
const claimsHistory = (oldListOfClaims = [], action) => {
  if (action.type === 'CREATE_CLAIM') {
    // we care about this action (FORM!)
    return [...oldListOfClaims, action.payload];
  }
  
  // we don't care the action (form!!)
  return oldListOfClaims;
};

const accounting = (bagOfMoney = 0, action) => {
  if (action.type === 'CREATE_CLAIM') {
    return bagOfMoney - action.payload.amountOfMoneyToCollect;
  } else if (action.type === 'CREATE_POLICY') {
    return bagOfMoney + action.payload.amount;
  }
  
  return bagOfMoney;
};

const policies = (listOfPolicies = [], action) => {
  if (action.type === 'CREATE_POLICY') {
    return [...listOfPolicies, action.payload.name];
  } else if (action.type === 'DELETE_POLICY') {
    return listOfPolicies.filter(name => name !== action.payload.name);
  }
  
  return listOfPolicies;
};

//*********************************************************************************************************************************************************
// Create a store of reducers all combined together
//*********************************************************************************************************************************************************
const { createStore, combineReducers } = Redux;

const ourDepartments = combineReducers({
  accounting: accounting,
  claimsHistory: claimsHistory,
  policies: policies
});

const store = createStore(ourDepartments);

//*********************************************************************************************************************************************************
// Start invoking actions(i.e. customer dropping forms) and see how reducer/department processes it. Uncomment one after the other to see the behavior
//*********************************************************************************************************************************************************

store.dispatch(createPolicy('Alex', 20));
//store.dispatch(createPolicy('Jim', 30));
//store.dispatch(createPolicy('Bob', 40));

//store.dispatch(createClaim('Alex', 10));
//store.dispatch(createClaim('Jim', 10));
//store.dispatch(createClaim('Bob', 10));

//store.dispatch(deletePolicy('Alex'));
//store.dispatch(deletePolicy('Jim'));
//store.dispatch(deletePolicy('Bob'));

console.log(store.getState());